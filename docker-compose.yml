# Literature Parser Backend - Neo4j Version
# Simplified Docker Compose configuration with Neo4j as primary database

services:
  # ========== Application Services ==========
  api:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: prod
    image: literature_parser_backend:${LITERATURE_PARSER_BACKEND_VERSION:-latest}
    restart: always
    env_file:
      - .env
    command: poetry run python -m literature_parser_backend
    depends_on:
      neo4j:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - literature_parser_network
    ports:
      - "8000:8000"

  worker:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: prod
    image: literature_parser_backend:${LITERATURE_PARSER_BACKEND_VERSION:-latest}
    restart: always
    env_file:
      - .env
    command: poetry run celery -A literature_parser_backend.worker.celery_app worker --loglevel=info --concurrency=8 --queues=literature
    depends_on:
      neo4j:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      grobid:
        condition: service_started
    volumes:
      - ./debug_pdfs:/tmp/debug_pdfs
    networks:
      - literature_parser_network

  # ========== Database Services ==========
  neo4j:
    image: neo4j:5.15-community
    container_name: literature_parser_neo4j
    restart: always
    environment:
      # Authentication
      - NEO4J_AUTH=neo4j/literature_parser_neo4j
      
      # Performance configuration
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      
      # APOC plugin support (for graph algorithms)
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      
      # Security configuration  
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_allow__csv__import__from__file__urls=true
      
      # Config validation (disable strict validation for compatibility)
      - NEO4J_server_config_strict__validation_enabled=false
      
      # Browser and network configuration
      - NEO4J_server_default__listen__address=0.0.0.0
      - NEO4J_server_default__advertised__address=175.24.200.253
      - NEO4J_server_bolt_listen__address=0.0.0.0:7687
      - NEO4J_server_http_listen__address=0.0.0.0:7474
      - NEO4J_server_bolt_advertised__address=175.24.200.253:7687
      - NEO4J_server_http_advertised__address=175.24.200.253:7474
      
    ports:
      - "7474:7474"  # HTTP Browser
      - "7687:7687"  # Bolt Protocol
    volumes:
      - literature_parser_neo4j_data:/data
      - literature_parser_neo4j_logs:/logs
      - literature_parser_neo4j_import:/var/lib/neo4j/import
      - literature_parser_neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "literature_parser_neo4j", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s
    networks:
      - literature_parser_network

  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: literature_parser_elasticsearch
    restart: always
    environment:
      # Cluster configuration
      - node.name=literature_parser_es_node
      - cluster.name=literature_parser_es_cluster
      - discovery.type=single-node
      
      # Memory configuration
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
      
      # Security configuration
      - ELASTIC_PASSWORD=literature_parser_elastic
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - literature_parser_elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-u", "elastic:literature_parser_elastic", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s
    networks:
      - literature_parser_network

  # ========== Supporting Services ==========
  redis:
    image: redis:7-alpine
    hostname: literature_parser_backend-redis
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - literature_parser_backend-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - literature_parser_network
    ports:
      - "6379:6379"

  grobid:
    image: grobid/grobid:0.8.0
    restart: always
    volumes:
      - grobid-data:/opt/grobid
    ports:
      - "8070:8070"
    networks:
      - literature_parser_network

  # Neo4j Browser is built into Neo4j service at port 7474
  # Redis can be managed via command line: docker exec -it <redis_container> redis-cli

networks:
  literature_parser_network:
    driver: bridge

volumes:
  # Neo4j volumes
  literature_parser_neo4j_data:
    driver: local
  literature_parser_neo4j_logs:
    driver: local  
  literature_parser_neo4j_import:
    driver: local
  literature_parser_neo4j_plugins:
    driver: local
    
  # Elasticsearch volumes
  literature_parser_elasticsearch_data:
    driver: local
    
  # Redis volumes (preserved from original)
  literature_parser_backend-redis-data:
    driver: local
    
  # GROBID volumes
  grobid-data:
    driver: local